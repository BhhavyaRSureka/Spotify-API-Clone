# Test generated by RoostGPT for test Testing12345 using AI Type Open AI and AI Model gpt-4

# RoostTestHash=d94103a8c3

config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 20
  plugins:
    expect: {}
  payload:
    path: "UpdateRecurringTransfers_put_others.csv"
    fields: ["paymentId", "customerId", "amount", "scheduledDate", "sourceAccountId", "targetAccountId", "amountType", "iterate", "numberOfTransfers", "updateTransferType"]
    skipHeader: true
scenarios:
  - name: "Update recurring transfers test scenario"
    flow:
      - log: "Invalid Authorization Test"
      - put:
          url: "/UpdateRecurringTransfers"
          headers:
            koreUserId: "TestUser"
            botId: "TestBot"
            userCode: "TestCode"
            accountId: "TestAccount"
            Authorization: "InvalidToken"
          json:
            paymentId: "{{ paymentId }}"
            customerId: "{{ customerId }}"
            amount: "{{ amount }}"
            scheduledDate: "{{ scheduledDate }}"
            sourceAccountId: "{{ sourceAccountId }}"
            targetAccountId: "{{ targetAccountId }}"
            recurringOptions:
              amountType: "{{ amountType }}"
              frequency:
                iterate: "{{ iterate }}"
                duration:
                  numberOfTransfers: "{{ numberOfTransfers }}"
              updateTransferType: "{{ updateTransferType }}"
          expect:
            - statusCode: 401
            - hasProperty: "err.message"
            - equals:
                - "{{ err.message }}"
                - "Error: Authorisation failed."
      - think: 1
      - log: "Invalid URL Test"
      - put:
          url: "/InvalidURL"
          headers:
            koreUserId: "TestUser"
            botId: "TestBot"
            userCode: "TestCode"
            accountId: "TestAccount"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          json:
            paymentId: "{{ paymentId }}"
            customerId: "{{ customerId }}"
            amount: "{{ amount }}"
            scheduledDate: "{{ scheduledDate }}"
            sourceAccountId: "{{ sourceAccountId }}"
            targetAccountId: "{{ targetAccountId }}"
            recurringOptions:
              amountType: "{{ amountType }}"
              frequency:
                iterate: "{{ iterate }}"
                duration:
                  numberOfTransfers: "{{ numberOfTransfers }}"
              updateTransferType: "{{ updateTransferType }}"
          expect:
            - statusCode: 404
            - hasProperty: "err.message"
            - equals:
                - "{{ err.message }}"
                - "Error: Not Found"
      - think: 1
      - log: "Missing required fields Test"
      - put:
          url: "/UpdateRecurringTransfers"
          headers:
            koreUserId: "TestUser"
            botId: "TestBot"
            userCode: "TestCode"
            accountId: "TestAccount"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          json:
            paymentId: "{{ paymentId }}"
            customerId: "{{ customerId }}"
            amount: "{{ amount }}"
            scheduledDate: "{{ scheduledDate }}"
            sourceAccountId: "{{ sourceAccountId }}"
            targetAccountId: "{{ targetAccountId }}"
            recurringOptions:
              amountType: "{{ amountType }}"
              frequency:
                iterate: "{{ iterate }}"
                duration:
                  numberOfTransfers: "{{ numberOfTransfers }}"
          expect:
            - statusCode: 400
            - hasProperty: "err.message"
            - equals:
                - "{{ err.message }}"
                - "Error: Required fields are missing"
      - think: 1
