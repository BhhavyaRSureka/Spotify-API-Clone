# Test generated by RoostGPT for test Testing12345 using AI Type Open AI and AI Model gpt-4

# RoostTestHash=7e03af5a84

config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 20
  payload:
    path: "GetRecurringTransfers_post_others.csv"
    fields:
      - "customerId"
      - "status"
    skipHeader: true
  processor: "./processor.js"
  ensure:
    p99: 200
  plugins:
    expect: {}
scenarios:
  - name: "GetRecurringTransfers API negative test cases"
    flow:
      - log: "Test Case 1: Authorization failed. Expect 401 status code"
        post:
          url: "/GetRecurringTransfers"
          json:
            customerId: "{{ customerId }}"
            status: "{{ status }}"
          headers:
            koreUserId: "invalid"
            botId: "invalid"
            userCode: "invalid"
            accountId: "invalid"
            Authorization: "invalid"
          capture:
            - json: "$.err.message"
              as: "errorMessage"
          expect:
            - statusCode: 401
            - hasProperty: "err"
            - equals: 
                - "{{ errorMessage }}"
                - "Authorization failed"
      - think: 1
      - log: "Test Case 2: Invalid URL. Expect 404 status code"
        post:
          url: "/InvalidURL"
          json:
            customerId: "{{ customerId }}"
            status: "{{ status }}"
          headers:
            koreUserId: "{{ $processEnvironment.KORE_USER_ID }}"
            botId: "{{ $processEnvironment.BOT_ID }}"
            userCode: "{{ $processEnvironment.USER_CODE }}"
            accountId: "{{ $processEnvironment.ACCOUNT_ID }}"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 404
      - think: 1
      - log: "Test Case 3: Missing required header. Expect 400 status code"
        post:
          url: "/GetRecurringTransfers"
          json:
            customerId: "{{ customerId }}"
            status: "{{ status }}"
          headers:
            koreUserId: "{{ $processEnvironment.KORE_USER_ID }}"
            botId: "{{ $processEnvironment.BOT_ID }}"
            userCode: "{{ $processEnvironment.USER_CODE }}"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 400
