// Test generated by RoostGPT for test Spotify-Test using AI Type Open AI and AI Model gpt-4

package com.csc301.profilemicroservice;

import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Transaction;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;

@ExtendWith(MockitoExtension.class)
public class PlaylistDriverImpl_unlikeSong_19d21acb3f_Test {

    @Mock
    private Driver driver;
    @Mock
    private Session session;
    @Mock
    private Transaction transaction;
    @Mock
    private StatementResult statementResult;
    @InjectMocks
    private PlaylistDriverImpl playlistDriver;

    @BeforeEach
    public void setup() {
        when(driver.session()).thenReturn(session);
        when(session.beginTransaction()).thenReturn(transaction);
    }

    @Test
    public void testUnlikeSong_UserDoesNotExist() {
        when(transaction.run(anyString(), anyMap())).thenReturn(statementResult);
        when(statementResult.hasNext()).thenReturn(false);
        DbQueryStatus status = playlistDriver.unlikeSong("nonExistentUser", "songId");
        assertEquals(DbQueryExecResult.QUERY_ERROR_GENERIC, status.getdbQueryExecResult());
    }

    @Test
    public void testUnlikeSong_SongDoesNotExist() {
        when(transaction.run(anyString(), anyMap())).thenReturn(statementResult);
        when(statementResult.hasNext()).thenReturn(true, false);
        DbQueryStatus status = playlistDriver.unlikeSong("userName", "nonExistentSong");
        assertEquals(DbQueryExecResult.QUERY_ERROR_GENERIC, status.getdbQueryExecResult());
    }

    @Test
    public void testUnlikeSong_RelationshipDoesNotExist() {
        when(transaction.run(anyString(), anyMap())).thenReturn(statementResult);
        when(statementResult.hasNext()).thenReturn(true, true, false);
        DbQueryStatus status = playlistDriver.unlikeSong("userName", "songId");
        assertEquals(DbQueryExecResult.QUERY_ERROR_GENERIC, status.getdbQueryExecResult());
    }

    @Test
    public void testUnlikeSong_Success() {
        when(transaction.run(anyString(), anyMap())).thenReturn(statementResult);
        when(statementResult.hasNext()).thenReturn(true);
        DbQueryStatus status = playlistDriver.unlikeSong("userName", "songId");
        assertEquals(DbQueryExecResult.QUERY_OK, status.getdbQueryExecResult());
    }
}
