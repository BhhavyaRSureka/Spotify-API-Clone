// Test generated by RoostGPT for test Spotify-Test using AI Type Open AI and AI Model gpt-4

package com.csc301.profilemicroservice;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.junit.Before;
import org.junit.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class ProfileController_addProfile_9c29f2e3a1_Test {

    private ProfileDriver profileDriver;
    private ProfileController profileController;
    private HttpServletRequest request;

    @Before
    public void init() {
        profileDriver = mock(ProfileDriver.class);
        profileController = new ProfileController(profileDriver);
        request = mock(HttpServletRequest.class);
    }

    @Test
    public void testAddProfile_Success() {
        Map<String, String> params = new HashMap<>();
        params.put("userName", "testUser");
        params.put("fullName", "Test User");
        params.put("password", "testPassword");

        DbQueryStatus mockDbQueryStatus = new DbQueryStatus("OK", DbQueryExecResult.QUERY_OK);

        when(profileDriver.createUserProfile(params.get("userName"), params.get("fullName"), params.get("password")))
                .thenReturn(mockDbQueryStatus);

        Map<String, Object> result = profileController.addProfile(params, request);

        assertEquals("OK", result.get("message"));
        assertEquals(DbQueryExecResult.QUERY_OK, result.get("status"));
    }

    @Test
    public void testAddProfile_Failure() {
        Map<String, String> params = new HashMap<>();
        params.put("userName", "testUser");
        params.put("fullName", "Test User");
        params.put("password", "testPassword");

        DbQueryStatus mockDbQueryStatus = new DbQueryStatus("Error", DbQueryExecResult.QUERY_ERROR_GENERIC);

        when(profileDriver.createUserProfile(params.get("userName"), params.get("fullName"), params.get("password")))
                .thenReturn(mockDbQueryStatus);

        Map<String, Object> result = profileController.addProfile(params, request);

        assertEquals("Error", result.get("message"));
        assertEquals(DbQueryExecResult.QUERY_ERROR_GENERIC, result.get("status"));
    }
}
