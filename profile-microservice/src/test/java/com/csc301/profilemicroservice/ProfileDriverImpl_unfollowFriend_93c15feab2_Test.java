// Test generated by RoostGPT for test Spotify-Test using AI Type Open AI and AI Model gpt-4

package com.csc301.profilemicroservice;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.neo4j.driver.v1.*;
import org.neo4j.driver.v1.exceptions.NoSuchRecordException;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class ProfileDriverImpl_unfollowFriend_93c15feab2_Test {

    ProfileDriverImpl profileDriver;

    @Mock
    Driver driver;

    @Mock
    Session session;

    @Mock
    Transaction transaction;

    @Mock
    StatementResult statementResult;

    @Mock
    Record record;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        profileDriver = new ProfileDriverImpl(driver);
    }

    @Test
    public void testUnfollowFriend_UserDoesNotExist() {
        when(driver.session()).thenReturn(session);
        when(session.beginTransaction()).thenReturn(transaction);
        when(transaction.run(anyString(), anyMap())).thenReturn(statementResult);
        when(statementResult.hasNext()).thenReturn(false);

        DbQueryStatus status = profileDriver.unfollowFriend("user1", "user2");
        assertEquals(DbQueryExecResult.QUERY_ERROR_GENERIC, status.getdbQueryExecResult());
    }

    @Test
    public void testUnfollowFriend_FriendDoesNotExist() {
        when(driver.session()).thenReturn(session);
        when(session.beginTransaction()).thenReturn(transaction);
        when(transaction.run(anyString(), anyMap())).thenReturn(statementResult);
        when(statementResult.hasNext()).thenReturn(true, false);

        DbQueryStatus status = profileDriver.unfollowFriend("user1", "user2");
        assertEquals(DbQueryExecResult.QUERY_ERROR_GENERIC, status.getdbQueryExecResult());
    }

    @Test
    public void testUnfollowFriend_UserNotFollowingFriend() throws NoSuchRecordException {
        when(driver.session()).thenReturn(session);
        when(session.beginTransaction()).thenReturn(transaction);
        when(transaction.run(anyString(), anyMap())).thenReturn(statementResult);
        when(statementResult.hasNext()).thenReturn(true, true, true);
        when(statementResult.next()).thenReturn(record);
        when(record.get("bool")).thenReturn(Values.value(false));

        DbQueryStatus status = profileDriver.unfollowFriend("user1", "user2");
        assertEquals(DbQueryExecResult.QUERY_ERROR_GENERIC, status.getdbQueryExecResult());
    }

    @Test
    public void testUnfollowFriend_Success() throws NoSuchRecordException {
        when(driver.session()).thenReturn(session);
        when(session.beginTransaction()).thenReturn(transaction);
        when(transaction.run(anyString(), anyMap())).thenReturn(statementResult);
        when(statementResult.hasNext()).thenReturn(true, true, true);
        when(statementResult.next()).thenReturn(record);
        when(record.get("bool")).thenReturn(Values.value(true));

        DbQueryStatus status = profileDriver.unfollowFriend("user1", "user2");
        assertEquals(DbQueryExecResult.QUERY_OK, status.getdbQueryExecResult());
    }

    @Test
    public void testUnfollowFriend_Exception() {
        when(driver.session()).thenReturn(session);
        when(session.beginTransaction()).thenReturn(transaction);
        when(transaction.run(anyString(), anyMap())).thenThrow(new RuntimeException());

        DbQueryStatus status = profileDriver.unfollowFriend("user1", "user2");
        assertEquals(DbQueryExecResult.QUERY_ERROR_GENERIC, status.getdbQueryExecResult());
    }
}
