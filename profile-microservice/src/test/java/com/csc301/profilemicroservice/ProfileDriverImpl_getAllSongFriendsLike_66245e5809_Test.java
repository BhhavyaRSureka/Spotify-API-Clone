// Test generated by RoostGPT for test Spotify-Test using AI Type Open AI and AI Model gpt-4

package com.csc301.profilemicroservice;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Transaction;

public class ProfileDriverImpl_getAllSongFriendsLike_66245e5809_Test {

    private ProfileDriverImpl profileDriver;
    private Driver driver;
    private Session session;
    private Transaction trans;
    private StatementResult result;

    @BeforeEach
    public void setup() {
        driver = mock(Driver.class);
        session = mock(Session.class);
        trans = mock(Transaction.class);
        result = mock(StatementResult.class);
        profileDriver = new ProfileDriverImpl(driver);
    }

    @Test
    public void testGetAllSongFriendsLike_Success() {
        when(driver.session()).thenReturn(session);
        when(session.beginTransaction()).thenReturn(trans);
        when(trans.run(anyString(), anyMap())).thenReturn(result);

        Record record = mock(Record.class);
        when(result.hasNext()).thenReturn(true);
        when(result.next()).thenReturn(record);
        when(record.get("userName").asList()).thenReturn(Arrays.asList("follower1", "follower2"));
        when(record.get("songs").asList()).thenReturn(Arrays.asList("song1", "song2"));

        DbQueryStatus status = profileDriver.getAllSongFriendsLike("testUser");

        assertEquals(DbQueryExecResult.QUERY_OK, status.getdbQueryExecResult());
        Map<String, Object> expectedData = new HashMap<>();
        expectedData.put("follower1", Arrays.asList("song1", "song2"));
        expectedData.put("follower2", Arrays.asList("song1", "song2"));
        assertEquals(expectedData, status.getData());
    }

    @Test
    public void testGetAllSongFriendsLike_Failure() {
        when(driver.session()).thenReturn(session);
        when(session.beginTransaction()).thenReturn(trans);
        when(trans.run(anyString(), anyMap())).thenReturn(result);
        when(result.hasNext()).thenReturn(false);

        DbQueryStatus status = profileDriver.getAllSongFriendsLike("testUser");

        assertEquals(DbQueryExecResult.QUERY_ERROR_GENERIC, status.getdbQueryExecResult());
    }
}
